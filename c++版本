#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <unordered_map>
#include <random>
#include <ctime>

// 分词函数，将输入字符串按空格分割成单词
std::vector<std::string> tokenize(const std::string& text) {
    std::vector<std::string> tokens;
    std::stringstream ss(text);
    std::string word;
    while (ss >> word) {
        tokens.push_back(word);
    }
    return tokens;
}

// 读取文件内容
std::string readFile(const std::string& filename) {
    std::ifstream file(filename);
    std::stringstream buffer;
    buffer << file.rdbuf();
    return buffer.str();
}

// 生成大语言模型
void generateModel(const std::vector<std::string>& tokens, std::unordered_map<std::string, std::vector<std::string>>& model) {
    for (size_t i = 0; i < tokens.size() - 1; ++i) {
        model[tokens[i]].push_back(tokens[i + 1]);
    }
}

// 生成文本
std::string generateText(const std::unordered_map<std::string, std::vector<std::string>>& model, const std::string& startWord, int length) {
    std::string currentWord = startWord;
    std::string result = currentWord;

    std::default_random_engine generator(static_cast<unsigned int>(std::time(0)));
    for (int i = 1; i < length; ++i) {
        auto it = model.find(currentWord);
        if (it != model.end()) {
            const std::vector<std::string>& nextWords = it->second;
            std::uniform_int_distribution<size_t> distribution(0, nextWords.size() - 1);
            currentWord = nextWords[distribution(generator)];
            result += " " + currentWord;
        } else {
            break; // 如果没有找到下一个词，结束生成
        }
    }
    return result;
}

int main() {
    // 读取训练文本
    std::string filename = "training_text.txt";
    std::string text = readFile(filename);

    // 分词
    std::vector<std::string> tokens = tokenize(text);

    // 构建2-gram模型
    std::unordered_map<std::string, std::vector<std::string>> model;
    generateModel(tokens, model);

    // 生成文本
    std::string startWord = tokens[0]; // 使用训练文本中的第一个词作为起始词
    int textLength = 100; // 生成文本的长度（词数）
    std::string generatedText = generateText(model, startWord, textLength);

    // 输出生成的文本
    std::cout << "Generated Text:\n" << generatedText << std::endl;

    return 0;
}
